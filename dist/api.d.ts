/**
 * ClickSend v3 API
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..*
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference types="node" />
import localVarRequest = require('request');
import http = require('http');
/**
* Complete account details needed for the user.
*/
export declare class Account {
    /**
    * Your username
    */
    'username': string;
    /**
    * Your password
    */
    'password': string;
    /**
    * Your phone number in E.164 format.
    */
    'userPhone': string;
    /**
    * Your email
    */
    'userEmail': string;
    /**
    * Your first name
    */
    'userFirstName': string;
    /**
    * Your last name
    */
    'userLastName': string;
    /**
    * Your delivery to value.
    */
    'accountName': string;
    /**
    * Your country
    */
    'country': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class AccountForgotPasswordVerify {
    /**
    * ID of subaccount
    */
    'subaccountId': number;
    /**
    * Activation token
    */
    'activationToken': string;
    /**
    * Password
    */
    'password': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Verifies an account by token that should have been sent to the user's phone
*/
export declare class AccountVerify {
    /**
    * Country code
    */
    'country': string;
    /**
    * User's phone number
    */
    'userPhone': string;
    /**
    * Type of verification
    */
    'type': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Base model for all address-related objects.
*/
export declare class Address {
    /**
    * Your address name.
    */
    'addressName': string;
    /**
    * Your address line 1
    */
    'addressLine1': string;
    /**
    * Your city
    */
    'addressCity': string;
    /**
    * Your postal code
    */
    'addressPostalCode': string;
    /**
    * Your country
    */
    'addressCountry': string;
    /**
    * Your address line 2
    */
    'addressLine2'?: string;
    /**
    * Your state
    */
    'addressState'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Email attachment
*/
export declare class Attachment {
    /**
    * The base64-encoded contents of the file.
    */
    'content': string;
    /**
    * The type of file being attached.
    */
    'type': string;
    /**
    * The name of the file being attached.
    */
    'filename': string;
    /**
    * Inline for content that can be displayed within the email, or attachment for any other files.
    */
    'disposition': string;
    /**
    * An ID for the content.
    */
    'contentId': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Contains all details for the main contact.
*/
export declare class Contact {
    /**
    * Your phone number in E.164 format. Must be provided if no fax number or email.
    */
    'phoneNumber': string;
    /**
    *
    */
    'custom1': string;
    /**
    * Your email. Must be provided if no phone number or fax number.
    */
    'email'?: string;
    /**
    * Your fax number. Must be provided if no phone number or email.
    */
    'faxNumber'?: string;
    /**
    * Your first name.
    */
    'firstName'?: string;
    /**
    * Your street address
    */
    'addressLine1'?: string;
    /**
    *
    */
    'addressLine2'?: string;
    /**
    * Your nearest city
    */
    'addressCity'?: string;
    /**
    * Your current state
    */
    'addressState'?: string;
    /**
    * Your current postcode
    */
    'addressPostalCode'?: string;
    /**
    * Your current country
    */
    'addressCountry'?: string;
    /**
    * Your organisation name
    */
    'organizationName'?: string;
    /**
    *
    */
    'custom2'?: string;
    /**
    *
    */
    'custom3'?: string;
    /**
    *
    */
    'custom4'?: string;
    /**
    * Your last name
    */
    'lastName'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Your contact list.
*/
export declare class ContactList {
    /**
    * Your list name.
    */
    'listName': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Contact list import model
*/
export declare class ContactListImport {
    /**
    * URL of file to process
    */
    'fileUrl': string;
    /**
    * Order of fields in file
    */
    'fieldOrder': Array<string>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Credit card model
*/
export declare class CreditCard {
    /**
    * Credit card number
    */
    'number': string;
    /**
    * Expiry month of credit card
    */
    'expiryMonth': number;
    /**
    * Expiry year of credit card
    */
    'expiryYear': number;
    /**
    * CVC number of credit card
    */
    'cvc': number;
    /**
    * Name printed on credit card
    */
    'name': string;
    /**
    * Name of bank that credit card belongs to
    */
    'bankName': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* All dates before specified timestam.
*/
export declare class DateBefore {
    /**
    * An optional timestamp - mark all as read before this timestamp. If not given, all messages will be marked as read.
    */
    'dateBefore'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Issues with message delivery
*/
export declare class DeliveryIssue {
    /**
    * The message id of the message.
    */
    'messageId'?: string;
    /**
    * The type of message, must be one of the following values SMS, MMS, VOICE, EMAIL_MARKETING, EMAIL_TRANSACTIONAL, FAX, POST.
    */
    'type': string;
    /**
    * The description of the message.
    */
    'description': string;
    /**
    * The user's comments.
    */
    'clientComments'?: string;
    /**
    * The user's email address.
    */
    'emailAddress': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Model for a Delivery Receipt
*/
export declare class DeliveryReceiptRule {
    /**
    * Rule Name.
    */
    'ruleName': string;
    /**
    * Match Type. 0=All reports.
    */
    'matchType': number;
    /**
    * Action to be taken (AUTO_REPLY, EMAIL_USER, EMAIL_FIXED, URL, SMS, POLL, GROUP_SMS, MOVE_CONTACT, CREATE_CONTACT, CREATE_CONTACT_PLUS_EMAIL, CREATE_CONTACT_PLUS_NAME_EMAIL CREATE_CONTACT_PLUS_NAME, SMPP, NONE).
    */
    'action': string;
    /**
    * Action address.
    */
    'actionAddress': string;
    /**
    * Enabled: Disabled=0 or Enabled=1.
    */
    'enabled': number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Send Email
*/
export declare class Email {
    /**
    * Array of To Recipient items.
    */
    'to': Array<EmailRecipient>;
    /**
    * Array of Cc Recipient items.
    */
    'cc'?: Array<EmailRecipient>;
    /**
    * Array of Bcc Recipient items.
    */
    'bcc'?: Array<EmailRecipient>;
    'from': EmailFrom;
    /**
    * Subject of the email.
    */
    'subject'?: string;
    /**
    * Body of the email.
    */
    'body': string;
    /**
    * Array of Attachment items.
    */
    'attachments'?: Array<Attachment>;
    /**
    * Schedule.
    */
    'schedule'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class EmailAddress {
    /**
    * Email to be allowed.
    */
    'emailAddress': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Campaign Model for Email
*/
export declare class EmailCampaign {
    /**
    * Your campaign name.
    */
    'name': string;
    /**
    * Your campaign subject.
    */
    'subject': string;
    /**
    * Your campaign message.
    */
    'body': string;
    /**
    * The allowed email address id.
    */
    'fromEmailAddressId': number;
    /**
    * Your name or business name.
    */
    'fromName': string;
    /**
    * Your template id.
    */
    'templateId'?: number;
    /**
    * Your contact list id.
    */
    'listId': number;
    /**
    * Your schedule timestamp.
    */
    'schedule'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* From Email object.
*/
export declare class EmailFrom {
    /**
    * Email address id of the recipient.
    */
    'emailAddressId': string;
    /**
    * Name of the recipient.
    */
    'name'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Recipient of an email, either To, Cc, or Bcc.
*/
export declare class EmailRecipient {
    /**
    * Email of the recipient.
    */
    'email': string;
    /**
    * Name of the recipient.
    */
    'name'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Email-to-SMS Allowed Address
*/
export declare class EmailSMSAddress {
    /**
    * Your email address
    */
    'emailAddress': string;
    /**
    * Your sender id
    */
    'from': string;
    /**
    * Your subaccount id
    */
    'subaccountId'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Model for Email Templates
*/
export declare class EmailTemplateNew {
    /**
    * The intended name for the new template.
    */
    'templateName': string;
    /**
    * The ID of the master template you want to base on.
    */
    'templateIdMaster': number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Model for Email Templates
*/
export declare class EmailTemplateUpdate {
    /**
    * The intended name for the template.
    */
    'templateName'?: string;
    /**
    * Your template body.
    */
    'body': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Base model for Fax Messages
*/
export declare class FaxMessage {
    /**
    * Your method of sending e.g. 'wordpress', 'php', 'c#'.
    */
    'source'?: string;
    /**
    * Recipient fax number in E.164 format.
    */
    'to': string;
    /**
    * Your list ID if sending to a whole list. Can be used instead of 'to'.
    */
    'listId'?: number;
    /**
    * Your sender id. Must be a valid fax number.
    */
    'from'?: string;
    /**
    * Leave blank for immediate delivery. Your schedule time in unix format http://help.clicksend.com/what-is-a-unix-timestamp
    */
    'schedule'?: number;
    /**
    * Your reference. Will be passed back with all replies and delivery reports.
    */
    'customString'?: string;
    /**
    * Recipient country.
    */
    'country'?: string;
    /**
    * An email address where the reply should be emailed to.
    */
    'fromEmail'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Array of FaxMessage items
*/
export declare class FaxMessageCollection {
    /**
    * Array of FaxMessage items
    */
    'messages': Array<FaxMessage>;
    /**
    * URL of file to send
    */
    'fileUrl': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Contains all details for the main contact.
*/
export declare class Fields {
    'fields'?: FieldsFields;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* From Email object.
*/
export declare class FieldsFields {
    /**
    * Your phone number in E.164 format. Must be provided if no fax number or email.
    */
    'phoneNumber'?: string;
    /**
    *
    */
    'custom1'?: string;
    /**
    * Your email. Must be provided if no phone number or fax number.
    */
    'email'?: string;
    /**
    * Your fax number. Must be provided if no phone number or email.
    */
    'faxNumber'?: string;
    /**
    * Your first name.
    */
    'firstName'?: string;
    /**
    * Your street address
    */
    'addressLine1'?: string;
    /**
    *
    */
    'addressLine2'?: string;
    /**
    * Your nearest city
    */
    'addressCity'?: string;
    /**
    * Your current state
    */
    'addressState'?: string;
    /**
    * Your current postcode
    */
    'addressPostalCode'?: string;
    /**
    * Your current country
    */
    'addressCountry'?: string;
    /**
    * Your organisation name
    */
    'organizationName'?: string;
    /**
    *
    */
    'custom2'?: string;
    /**
    *
    */
    'custom3'?: string;
    /**
    *
    */
    'custom4'?: string;
    /**
    * Your last name
    */
    'lastName'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class ForgotPassword {
    /**
    * Username belonging to account.
    */
    'username': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class ForgotUsername {
    /**
    * Email belonging to account.
    */
    'email'?: string;
    /**
    * Phone number belonging to account.
    */
    'phoneNumber'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Model for Inbound FAX Rules
*/
export declare class InboundFaxRule {
    /**
    * Dedicated Number. Can be '*' to apply to all numbers.
    */
    'dedicatedNumber': string;
    /**
    * Rule Name.
    */
    'ruleName': string;
    /**
    * Action to be taken (AUTO_REPLY, EMAIL_USER, EMAIL_FIXED, URL, SMS, POLL, GROUP_SMS, MOVE_CONTACT, CREATE_CONTACT, CREATE_CONTACT_PLUS_EMAIL, CREATE_CONTACT_PLUS_NAME_EMAIL CREATE_CONTACT_PLUS_NAME, SMPP, NONE).
    */
    'action': string;
    /**
    * Action address.
    */
    'actionAddress': string;
    /**
    * Enabled: Disabled=0 or Enabled=1.
    */
    'enabled': number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Model for Inbound SMS Rules
*/
export declare class InboundSMSRule {
    /**
    * Dedicated Number. Can be '*' to apply to all numbers.
    */
    'dedicatedNumber': string;
    /**
    * Rule Name.
    */
    'ruleName': string;
    /**
    * Message Search Type: 0=Any message, 1=starts with, 2=contains, 3=does not contain.
    */
    'messageSearchType': number;
    /**
    * Message search term.
    */
    'messageSearchTerm': string;
    /**
    * Action to be taken (AUTO_REPLY, EMAIL_USER, EMAIL_FIXED, URL, SMS, POLL, GROUP_SMS, MOVE_CONTACT, CREATE_CONTACT, CREATE_CONTACT_PLUS_EMAIL, CREATE_CONTACT_PLUS_NAME_EMAIL CREATE_CONTACT_PLUS_NAME, SMPP, NONE).
    */
    'action': string;
    /**
    * Action address.
    */
    'actionAddress': string;
    /**
    * Enabled: Disabled=0 or Enabled=1.
    */
    'enabled': number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Campaign Model for MMS
*/
export declare class MmsCampaign {
    /**
    * Your list id.
    */
    'listId': number;
    /**
    * Your campaign name.
    */
    'name': string;
    /**
    * Your campaign message.
    */
    'body': string;
    /**
    * Your sender id - more info: http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number.
    */
    'from'?: string;
    /**
    * Your schedule timestamp.
    */
    'schedule'?: number;
    /**
    * Subject of MMS campaign.
    */
    'subject': string;
    /**
    * URL pointing to media file.
    */
    'mediaFile': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Single MMS message model
*/
export declare class MmsMessage {
    /**
    * Recipient phone number in E.164 format
    */
    'to'?: string;
    /**
    * Your message
    */
    'body': string;
    /**
    * Subject line (max 20 characters)
    */
    'subject': string;
    /**
    * Your sender ID
    */
    'from'?: string;
    /**
    * Recipient country
    */
    'country'?: string;
    /**
    * Your method of sending
    */
    'source'?: string;
    /**
    * Your list ID if sending to a whole list (can be used instead of 'to')
    */
    'listId'?: number;
    /**
    * Schedule time in unix format (leave blank for immediate delivery)
    */
    'schedule'?: number;
    /**
    * Custom string for your reference
    */
    'customString'?: string;
    /**
    * Email to send replies to
    */
    'fromEmail'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Array of MmsMessage items
*/
export declare class MmsMessageCollection {
    /**
    * Media file you want to send
    */
    'mediaFile': string;
    /**
    * Array of MmsMessage models
    */
    'messages': Array<MmsMessage>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* PostLetter model
*/
export declare class PostLetter {
    /**
    * URL of file to send
    */
    'fileUrl': string;
    /**
    * Whether letter is priority
    */
    'priorityPost'?: number;
    /**
    * Array of PostRecipient models
    */
    'recipients': Array<PostRecipient>;
    /**
    * Whether using our template
    */
    'templateUsed'?: number;
    /**
    * Whether letter is duplex
    */
    'duplex'?: number;
    /**
    * Whether letter is in colour
    */
    'colour'?: number;
    /**
    * Source being sent from
    */
    'source'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* PostPostcard model
*/
export declare class PostPostcard {
    /**
    * Postcard file URLs
    */
    'fileUrls': Array<string>;
    /**
    * Array of recipients
    */
    'recipients': Array<PostRecipient>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* PostRecipient model
*/
export declare class PostRecipient {
    /**
    * Name of address
    */
    'addressName': string;
    /**
    * First line of address
    */
    'addressLine1': string;
    /**
    * Second line of address
    */
    'addressLine2'?: string;
    /**
    * City
    */
    'addressCity': string;
    /**
    * State
    */
    'addressState': string;
    /**
    * Postal code
    */
    'addressPostalCode': string;
    /**
    * Country
    */
    'addressCountry': string;
    /**
    * ID of return address to use
    */
    'returnAddressId': number;
    /**
    * When to send letter (0/null=now)
    */
    'schedule'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* ResellerAccount model
*/
export declare class ResellerAccount {
    /**
    * Account username
    */
    'username': string;
    /**
    * Account password (unhashed)
    */
    'password': string;
    /**
    * Account email
    */
    'userEmail': string;
    /**
    * Account phone number
    */
    'userPhone': string;
    /**
    * Account owner first name
    */
    'userFirstName': string;
    /**
    * Account owner last name
    */
    'userLastName': string;
    /**
    * Account name (usually company name)
    */
    'accountName': string;
    /**
    * Country of account holder
    */
    'country': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* ResellerAccountTransferCredit model
*/
export declare class ResellerAccountTransferCredit {
    /**
    * User ID of client
    */
    'clientUserId': number;
    /**
    * Balance to transfer
    */
    'balance': number;
    /**
    * Currency of balance to transfer
    */
    'currency': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Campaign Model for SMS
*/
export declare class SmsCampaign {
    /**
    * Your list id.
    */
    'listId': number;
    /**
    * Your campaign name.
    */
    'name': string;
    /**
    * Your campaign message.
    */
    'body': string;
    /**
    * Your sender id - more info: http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number.
    */
    'from'?: string;
    /**
    * Your schedule timestamp.
    */
    'schedule'?: number;
    /**
    * url to be shortened add http://smsg.io/xxxxx` to the body as a placeholder.
    */
    'urlToShorten'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* SmsMessage model
*/
export declare class SmsMessage {
    /**
    * Your sender id - more info: http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number.
    */
    'from'?: string;
    /**
    * Your message.
    */
    'body': string;
    /**
    * Recipient phone number in E.164 format.
    */
    'to'?: string;
    /**
    * Your method of sending e.g. 'wordpress', 'php', 'c#'.
    */
    'source'?: string;
    /**
    * Leave blank for immediate delivery. Your schedule time in unix format http://help.clicksend.com/what-is-a-unix-timestamp
    */
    'schedule'?: number;
    /**
    * Your reference. Will be passed back with all replies and delivery reports.
    */
    'customString'?: string;
    /**
    * Your list ID if sending to a whole list. Can be used instead of 'to'.
    */
    'listId'?: number;
    /**
    * Recipient country.
    */
    'country'?: string;
    /**
    * An email address where the reply should be emailed to. If omitted, the reply will be emailed back to the user who sent the outgoing SMS.
    */
    'fromEmail'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Array of SmsMessage items
*/
export declare class SmsMessageCollection {
    /**
    * Array of SmsMessage items
    */
    'messages': Array<SmsMessage>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* SmsTemplate model
*/
export declare class SmsTemplate {
    /**
    * Name of template
    */
    'templateName': string;
    /**
    * Body of template
    */
    'body': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* String to be stripped.
*/
export declare class StrippedString {
    /**
    * String to be.
    */
    'stripString': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Accounts that are maintained under a main account
*/
export declare class Subaccount {
    /**
    * Your new api username.
    */
    'apiUsername': string;
    /**
    * Your new password
    */
    'password': string;
    /**
    * Your new email.
    */
    'email': string;
    /**
    * Your phone number in E.164 format.
    */
    'phoneNumber': string;
    /**
    * Your firstname
    */
    'firstName': string;
    /**
    * Your lastname
    */
    'lastName': string;
    /**
    * Your access users flag value, must be 1 or 0.
    */
    'accessUsers'?: number;
    /**
    * Your access billing flag value, must be 1 or 0.
    */
    'accessBilling'?: number;
    /**
    * Your access reporting flag value, must be 1 or 0.
    */
    'accessReporting'?: number;
    /**
    * Your access contacts flag value, must be 1 or 0.
    */
    'accessContacts'?: number;
    /**
    * Your access settings flag value, must be 1 or 0.
    */
    'accessSettings'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Your file to be uploaded.
*/
export declare class UploadFile {
    /**
    * Your base64 encoded file string.
    */
    'content': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Your url.
*/
export declare class Url {
    /**
    * Your url.
    */
    'url': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* VoiceMessage fields: source, to, list_id, body, lang, voice, schedule, custom_string, country
*/
export declare class VoiceMessage {
    /**
    * Your phone number in E.164 format.
    */
    'to'?: string;
    /**
    * Biscuit uv3nlCOjRk croissant chocolate lollipop chocolate muffin.
    */
    'body': string;
    /**
    * Either 'female' or 'male'.
    */
    'voice': string;
    /**
    * Your reference. Will be passed back with all replies and delivery reports.
    */
    'customString': string;
    /**
    * The country of the recipient.
    */
    'country': string;
    /**
    * Your method of sending e.g. 'wordpress', 'php', 'c#'.
    */
    'source'?: string;
    /**
    * Your list ID if sending to a whole list. Can be used instead of 'to'.
    */
    'listId'?: number;
    /**
    * au (string, required) - See section on available languages.
    */
    'lang'?: string;
    /**
    * Leave blank for immediate delivery. Your schedule time in unix format http://help.clicksend.com/what-is-a-unix-timestamp
    */
    'schedule'?: number;
    /**
    * Whether you want to receive a keypress from the call recipient
    */
    'requireInput'?: number;
    /**
    * Whether to attempt to detect an answering machine or voicemail service and leave a message
    */
    'machineDetection'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Array of VoiceMessage items
*/
export declare class VoiceMessageCollection {
    /**
    * Array of VoiceMessage items
    */
    'messages': Array<VoiceMessage>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export declare enum AccountApiApiKeys {
}
export declare class AccountApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: AccountApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get account details
     * @summary Get account information
     * @param {*} [options] Override http request options.
     */
    accountGet(options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create An Account
     * @summary Create a new account
     * @param account Account model
     * @param {*} [options] Override http request options.
     */
    accountPost(account: Account, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get account useage by subaccount
     * @summary Get account useage by subaccount
     * @param year Year to filter by (yyyy)
     * @param month Month to filter by (mm)
     * @param {*} [options] Override http request options.
     */
    accountUseageBySubaccountGet(year: number, month: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send account activation token
     * @summary Send account activation token
     * @param accountVerify Account details
     * @param {*} [options] Override http request options.
     */
    accountVerifySendPut(accountVerify: AccountVerify, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Verify new account
     * @summary Verify new account
     * @param activationToken
     * @param {*} [options] Override http request options.
     */
    accountVerifyVerifyByActivationTokenPut(activationToken: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Forgot password
     * @summary Forgot password
     * @param forgotPassword
     * @param {*} [options] Override http request options.
     */
    forgotPasswordPut(forgotPassword?: ForgotPassword, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Verify forgot password
     * @summary Verify forgot password
     * @param verifyPassword verifyPassword data
     * @param {*} [options] Override http request options.
     */
    forgotPasswordVerifyPut(verifyPassword: AccountForgotPasswordVerify, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Forgot username
     * @summary Forgot username
     * @param forgotUsername
     * @param {*} [options] Override http request options.
     */
    forgotUsernamePut(forgotUsername?: ForgotUsername, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum AccountRechargeApiApiKeys {
}
export declare class AccountRechargeApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: AccountRechargeApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get Credit Card info
     * @summary Get Credit Card info
     * @param {*} [options] Override http request options.
     */
    rechargeCreditCardGet(options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update credit card info
     * @summary Update credit card info
     * @param creditCard CreditCard model
     * @param {*} [options] Override http request options.
     */
    rechargeCreditCardPut(creditCard: CreditCard, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get list of all packages
     * @summary Get list of all packages
     * @param country Country code
     * @param {*} [options] Override http request options.
     */
    rechargePackagesGet(country?: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Purchase a package
     * @summary Purchase a package
     * @param packageId ID of package to purchase
     * @param {*} [options] Override http request options.
     */
    rechargePurchaseByPackageIdPut(packageId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific Transaction
     * @summary Get specific Transaction
     * @param transactionId ID of transaction to retrieve
     * @param {*} [options] Override http request options.
     */
    rechargeTransactionsByTransactionIdGet(transactionId: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all transactions
     * @summary Purchase a package
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    rechargeTransactionsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum ContactApiApiKeys {
}
export declare class ContactApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ContactApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete a contact
     * @summary Delete a contact
     * @param listId List ID
     * @param contactId Contact ID
     * @param {*} [options] Override http request options.
     */
    listsContactsByListIdAndContactIdDelete(listId: number, contactId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get a specific contact
     * @summary Get a specific contact
     * @param listId Your contact list id you want to access.
     * @param contactId Your contact id you want to access.
     * @param {*} [options] Override http request options.
     */
    listsContactsByListIdAndContactIdGet(listId: number, contactId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update specific contact
     * @summary Update specific contact
     * @param listId Contact list id
     * @param contactId Contact ID
     * @param contact Contact model
     * @param {*} [options] Override http request options.
     */
    listsContactsByListIdAndContactIdPut(listId: number, contactId: number, contact: Contact, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all contacts in a list
     * @summary Get all contacts in a list
     * @param listId Contact list ID
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    listsContactsByListIdGet(listId: number, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create new contact
     * @summary Create new contact
     * @param contact Contact model
     * @param listId List id
     * @param {*} [options] Override http request options.
     */
    listsContactsByListIdPost(contact: Contact, listId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Remove all opted out contacts
     * @summary Remove all opted out contacts
     * @param listId Your list id
     * @param optOutListId Your opt out list id
     * @param {*} [options] Override http request options.
     */
    listsRemoveOptedOutContactsByListIdAndOptOutListIdPut(listId: number, optOutListId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Transfer contact to another list
     * @summary Transfer contact to another list
     * @param fromListId List ID for list that contains contact.
     * @param contactId Contact ID
     * @param toListId List ID for list you want to transfer contact to.
     * @param {*} [options] Override http request options.
     */
    listsTransferContactPut(fromListId: number, contactId: number, toListId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum ContactListApiApiKeys {
}
export declare class ContactListApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ContactListApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete a specific contact list
     * @summary ListsByListIdDelete
     * @param listId List ID
     * @param {*} [options] Override http request options.
     */
    listsByListIdDelete(listId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific contact list
     * @summary Get specific contact list
     * @param listId List ID
     * @param {*} [options] Override http request options.
     */
    listsByListIdGet(listId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update specific contact list
     * @summary Update specific contact list
     * @param listId Your list id
     * @param contactList Contact list model
     * @param {*} [options] Override http request options.
     */
    listsByListIdPut(listId: number, contactList: ContactList, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all contact lists
     * @summary Get all contact lists
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    listsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Import contacts to list
     * @summary Import contacts to list
     * @param listId Your contact list id you want to access.
     * @param file ContactListImport model
     * @param {*} [options] Override http request options.
     */
    listsImportByListIdPost(listId: number, file: ContactListImport, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create new contact list
     * @summary Create new contact list
     * @param contactList Contact list model
     * @param {*} [options] Override http request options.
     */
    listsPost(contactList: ContactList, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Remove duplicate contacts
     * @summary Remove duplicate contacts
     * @param listId Your list id
     * @param fields Fields model
     * @param {*} [options] Override http request options.
     */
    listsRemoveDuplicatesByListIdPut(listId: number, fields: Fields, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum CountriesApiApiKeys {
}
export declare class CountriesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: CountriesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get all countries
     * @summary Get all country codes
     * @param {*} [options] Override http request options.
     */
    countriesGet(options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum DeliveryIssuesApiApiKeys {
}
export declare class DeliveryIssuesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DeliveryIssuesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get all delivery issues
     * @summary Get all delivery issues
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    deliveryIssuesGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create delivery Issue
     * @summary Create delivery Issue
     * @param deliveryIssue DeliveryIssue model
     * @param {*} [options] Override http request options.
     */
    deliveryIssuesPost(deliveryIssue: DeliveryIssue, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum DetectAddressApiApiKeys {
}
export declare class DetectAddressApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DetectAddressApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Detects address in uploaded file.
     * @summary Detects address in uploaded file.
     * @param uploadFile Your file to be uploaded
     * @param {*} [options] Override http request options.
     */
    detectAddressPost(uploadFile: UploadFile, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum EmailDeliveryReceiptRulesApiApiKeys {
}
export declare class EmailDeliveryReceiptRulesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: EmailDeliveryReceiptRulesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete email delivery receipt automation
     * @summary Delete email delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    emailDeliveryReceiptAutomationDelete(receiptRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific email delivery receipt automation
     * @summary Get specific email delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    emailDeliveryReceiptAutomationGet(receiptRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create email delivery receipt automations
     * @summary Create email delivery receipt automations
     * @param deliveryReceiptRule Email delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    emailDeliveryReceiptAutomationPost(deliveryReceiptRule: DeliveryReceiptRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update email delivery receipt automation
     * @summary Update email delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param deliveryReceiptRule Delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    emailDeliveryReceiptAutomationPut(receiptRuleId: number, deliveryReceiptRule: DeliveryReceiptRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all email delivery receipt automations
     * @summary Get all email delivery receipt automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    emailDeliveryReceiptAutomationsGet(q?: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum EmailMarketingApiApiKeys {
}
export declare class EmailMarketingApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: EmailMarketingApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get all email addresses
     * @summary Get all email addresses
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    allowedEmailAddressGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create allowed Email Address
     * @summary Create allowed Email Address
     * @param emailAddress
     * @param {*} [options] Override http request options.
     */
    allowedEmailAddressPost(emailAddress?: EmailAddress, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Cancel email campaign
     * @summary Cancel email campaign
     * @param emailCampaignId Allowed email campaign id
     * @param {*} [options] Override http request options.
     */
    cancelEmailCampaignPut(emailCampaignId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific email campaign
     * @summary Get specific email campaign
     * @param emailCampaignId Allowed email campaign id
     * @param {*} [options] Override http request options.
     */
    emailCampaignGet(emailCampaignId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Export specific email campaign history
     * @summary Export specific email campaign history
     * @param emailCampaignId Allowed email campaign id
     * @param dateFrom Start date
     * @param dateTo End date
     * @param {*} [options] Override http request options.
     */
    emailCampaignHistoryExportGet(emailCampaignId: number, dateFrom?: number, dateTo?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific email campaign history
     * @summary Get specific email campaign history
     * @param emailCampaignId Allowed email campaign id
     * @param dateFrom Start date
     * @param dateTo End date
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    emailCampaignHistoryGet(emailCampaignId: number, dateFrom?: number, dateTo?: number, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send email campaign
     * @summary Send email campaign
     * @param emailCampaign Email model
     * @param {*} [options] Override http request options.
     */
    emailCampaignPost(emailCampaign: EmailCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Calculate email campaign price
     * @summary Calculate email campaign price
     * @param emailCampaign Email model
     * @param {*} [options] Override http request options.
     */
    emailCampaignPricePost(emailCampaign: EmailCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Edit email campaign
     * @summary Edit email campaign
     * @param emailCampaignId Allowed email campaign id
     * @param emailCampaign Email model
     * @param {*} [options] Override http request options.
     */
    emailCampaignPut(emailCampaignId: number, emailCampaign: EmailCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all email campaigns
     * @summary Get all email campaigns
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    emailCampaignsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send verification token
     * @summary Send verification token
     * @param emailAddressId Allowed email address id
     * @param {*} [options] Override http request options.
     */
    sendVerificationTokenGet(emailAddressId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Delete specific email address
     * @summary Delete specific email address
     * @param emailAddressId Allowed email address id
     * @param {*} [options] Override http request options.
     */
    specificAllowedEmailAddressDelete(emailAddressId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific email address
     * @summary Get specific email address
     * @param emailAddressId Allowed email address id
     * @param {*} [options] Override http request options.
     */
    specificAllowedEmailAddressGet(emailAddressId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Verify email address using verification token
     * @summary Verify email address using verification token
     * @param emailAddressId Allowed email address id
     * @param activationToken Your activation token.
     * @param {*} [options] Override http request options.
     */
    verifyAllowedEmailAddressGet(emailAddressId: number, activationToken: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum EmailToSmsApiApiKeys {
}
export declare class EmailToSmsApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: EmailToSmsApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get list of email to sms allowed addresses
     * @summary Get list of email to sms allowed addresses
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsEmailSmsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create email to sms allowed address
     * @summary Create email to sms allowed address
     * @param emailSmsAddress EmailSMSAddress model
     * @param {*} [options] Override http request options.
     */
    smsEmailSmsPost(emailSmsAddress: EmailSMSAddress, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Delete email to sms stripped string rule
     * @summary Delete email to sms stripped string rule
     * @param ruleId Your rule id
     * @param {*} [options] Override http request options.
     */
    smsEmailSmsStrippedStringDelete(ruleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get email to sms stripped string rule
     * @summary Get email to sms stripped string rule
     * @param ruleId Your rule id
     * @param {*} [options] Override http request options.
     */
    smsEmailSmsStrippedStringGet(ruleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create email to sms stripped string rules
     * @summary Create email to sms stripped string rule
     * @param strippedString StrippedString model
     * @param {*} [options] Override http request options.
     */
    smsEmailSmsStrippedStringPost(strippedString: StrippedString, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update email to sms stripped string rule
     * @summary Update email to sms stripped string rule
     * @param strippedString StrippedString model
     * @param ruleId Your rule id
     * @param {*} [options] Override http request options.
     */
    smsEmailSmsStrippedStringPut(strippedString: StrippedString, ruleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get list of email to sms stripped string rules
     * @summary Get list of email to sms stripped string rules
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsEmailSmsStrippedStringsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum FAXApiApiKeys {
}
export declare class FAXApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: FAXApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get a list of Fax History.
     * @summary Get a list of Fax History.
     * @param dateFrom Customize result by setting from date (timestsamp) Example: 1457572619.
     * @param dateTo Customize result by setting to date (timestamp) Example: 1457573000.
     * @param q Custom query Example: status:Sent,status_code:201.
     * @param order Order result by Example: date_added:desc,list_id:desc.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    faxHistoryGet(dateFrom?: number, dateTo?: number, q?: string, order?: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Calculate Total Price for Fax Messages sent
     * @summary Calculate Total Price for Fax Messages sent
     * @param faxMessage FaxMessageCollection model
     * @param {*} [options] Override http request options.
     */
    faxPricePost(faxMessage: FaxMessageCollection, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get a single fax receipt based on message id.
     * @summary Get a single fax receipt based on message id.
     * @param messageId ID of the message receipt to retrieve
     * @param {*} [options] Override http request options.
     */
    faxReceiptsByMessageIdGet(messageId: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all delivery receipts
     * @summary Get all delivery receipts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    faxReceiptsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Add a delivery receipt
     * @summary Add a delivery receipt
     * @param url Url model
     * @param {*} [options] Override http request options.
     */
    faxReceiptsPost(url: Url, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Mark delivery receipts as read
     * @summary Mark delivery receipts as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    faxReceiptsReadPut(dateBefore?: DateBefore, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send a fax using supplied supported file-types.
     * @summary Send a fax using supplied supported file-types.
     * @param faxMessage FaxMessageCollection model
     * @param {*} [options] Override http request options.
     */
    faxSendPost(faxMessage: FaxMessageCollection, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum FAXDeliveryReceiptRulesApiApiKeys {
}
export declare class FAXDeliveryReceiptRulesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: FAXDeliveryReceiptRulesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete fax delivery receipt automation
     * @summary Delete fax delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    faxDeliveryReceiptAutomationDelete(receiptRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific fax delivery receipt automation
     * @summary Get specific fax delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    faxDeliveryReceiptAutomationGet(receiptRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create fax delivery receipt automations
     * @summary Create fax delivery receipt automations
     * @param deliveryReceiptRule fax delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    faxDeliveryReceiptAutomationPost(deliveryReceiptRule: DeliveryReceiptRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update fax delivery receipt automation
     * @summary Update fax delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param deliveryReceiptRule Delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    faxDeliveryReceiptAutomationPut(receiptRuleId: number, deliveryReceiptRule: DeliveryReceiptRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all fax delivery receipt automations
     * @summary Get all fax delivery receipt automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    faxDeliveryReceiptAutomationsGet(q?: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum InboundFAXRulesApiApiKeys {
}
export declare class InboundFAXRulesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: InboundFAXRulesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete inbound fax automation
     * @summary Delete inbound fax automation
     * @param inboundRuleId Inbound rule id
     * @param {*} [options] Override http request options.
     */
    faxInboundAutomationDelete(inboundRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific inbound fax automation
     * @summary Get specific inbound fax automation
     * @param inboundRuleId Inbound rule id
     * @param {*} [options] Override http request options.
     */
    faxInboundAutomationGet(inboundRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create new inbound fax automation
     * @summary Create new inbound fax automation
     * @param inboundFaxRule Inbound fax rule model
     * @param {*} [options] Override http request options.
     */
    faxInboundAutomationPost(inboundFaxRule: InboundFaxRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update inbound fax automation
     * @summary Update inbound fax automation
     * @param inboundRuleId Inbound rule id
     * @param inboundFaxRule Inbound fax rule model
     * @param {*} [options] Override http request options.
     */
    faxInboundAutomationPut(inboundRuleId: number, inboundFaxRule: InboundFaxRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all inbound fax automations
     * @summary Get all inbound fax automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    faxInboundAutomationsGet(q?: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum InboundSMSRulesApiApiKeys {
}
export declare class InboundSMSRulesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: InboundSMSRulesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete inbound sms automation
     * @summary Delete inbound sms automation
     * @param inboundRuleId Inbound rule id
     * @param {*} [options] Override http request options.
     */
    smsInboundAutomationDelete(inboundRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific inbound sms automation
     * @summary Get specific inbound sms automation
     * @param inboundRuleId Inbound rule id
     * @param {*} [options] Override http request options.
     */
    smsInboundAutomationGet(inboundRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create new inbound sms automation
     * @summary Create new inbound sms automation
     * @param inboundSmsRule Inbound sms rule model
     * @param {*} [options] Override http request options.
     */
    smsInboundAutomationPost(inboundSmsRule: InboundSMSRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update inbound sms automation
     * @summary Update inbound sms automation
     * @param inboundRuleId Inbound rule id
     * @param inboundSmsRule Inbound sms rule model
     * @param {*} [options] Override http request options.
     */
    smsInboundAutomationPut(inboundRuleId: number, inboundSmsRule: InboundSMSRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all inbound sms automations
     * @summary Get all inbound sms automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsInboundAutomationsGet(q?: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum MMSApiApiKeys {
}
export declare class MMSApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MMSApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get Price for MMS sent
     * @summary Get Price for MMS sent
     * @param mmsMessages MmsMessageCollection model
     * @param {*} [options] Override http request options.
     */
    mmsPricePost(mmsMessages: MmsMessageCollection, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all delivery receipts
     * @summary Get all delivery receipts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    mmsReceiptsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Mark delivery receipts as read
     * @summary Mark delivery receipts as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    mmsReceiptsReadPut(dateBefore?: DateBefore, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send MMS
     * @summary Send MMS
     * @param mmsMessages MmsMessageCollection model
     * @param {*} [options] Override http request options.
     */
    mmsSendPost(mmsMessages: MmsMessageCollection, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum MasterEmailTemplatesApiApiKeys {
}
export declare class MasterEmailTemplatesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MasterEmailTemplatesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get all master email template categories
     * @summary Get all master email template categories
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    masterEmailTemplateCategoriesGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific master email template category
     * @summary Get specific master email template category
     * @param categoryId Email category id
     * @param {*} [options] Override http request options.
     */
    masterEmailTemplateCategoryGet(categoryId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific master email template
     * @summary Get specific master email template
     * @param templateId Email template id
     * @param {*} [options] Override http request options.
     */
    masterEmailTemplateGet(templateId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all master email templates
     * @summary Get all master email templates
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    masterEmailTemplatesGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all master email templates in a category
     * @summary Get all master email templates in a category
     * @param categoryId Email category id
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    masterEmailTemplatesInCategoryGet(categoryId: number, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum MmsCampaignApiApiKeys {
}
export declare class MmsCampaignApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MmsCampaignApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get specific mms campaign
     * @summary Get specific mms campaign
     * @param mmsCampaignId ID of MMS campaign to retrieve
     * @param {*} [options] Override http request options.
     */
    mmsCampaignByMmsCampaignIdGet(mmsCampaignId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update mms campaign
     * @summary Update mms campaign
     * @param mmsCampaignId ID of MMS campaign to update
     * @param campaign MmsCampaign model
     * @param {*} [options] Override http request options.
     */
    mmsCampaignsByMmsCampaignIdPut(mmsCampaignId: number, campaign: MmsCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Cancel sms campaign
     * @summary Cancel mms campaign
     * @param mmsCampaignId ID of MMS Campaign to cancel
     * @param {*} [options] Override http request options.
     */
    mmsCampaignsCancelByMmsCampaignIdPut(mmsCampaignId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get list of mms campaigns
     * @summary Get list of mms campaigns
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    mmsCampaignsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Calculate price for sms campaign
     * @summary Calculate price for mms campaign
     * @param campaign MmsCampaign model
     * @param {*} [options] Override http request options.
     */
    mmsCampaignsPricePost(campaign: MmsCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create mms campaign
     * @summary Create mms campaign
     * @param campaign MmsCampaign model
     * @param {*} [options] Override http request options.
     */
    mmsCampaignsSendPost(campaign: MmsCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum NumberApiApiKeys {
}
export declare class NumberApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: NumberApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Buy dedicated number
     * @summary Buy dedicated number
     * @param dedicatedNumber Phone number to purchase
     * @param {*} [options] Override http request options.
     */
    numbersBuyByDedicatedNumberPost(dedicatedNumber: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all availible dedicated numbers
     * @summary Get all availible dedicated numbers
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    numbersGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all dedicated numbers by country
     * @summary Get all dedicated numbers by country
     * @param country Country code to search
     * @param search Your search pattern or query.
     * @param searchType Your strategy for searching, 0 &#x3D; starts with, 1 &#x3D; anywhere, 2 &#x3D; ends with.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    numbersSearchByCountryGet(country: string, search?: string, searchType?: number, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum PostLetterApiApiKeys {
}
export declare class PostLetterApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PostLetterApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * export post letter history
     * @summary export post letter history
     * @param filename Filename to export to
     * @param {*} [options] Override http request options.
     */
    postLettersExportGet(filename: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all post letter history
     * @summary Get all post letter history
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    postLettersHistoryGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Calculate post letter price
     * @summary Calculate post letter price
     * @param postLetter PostLetter model
     * @param {*} [options] Override http request options.
     */
    postLettersPricePost(postLetter: PostLetter, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send post letter
     * @summary Send post letter
     * @param postLetter PostLetter model
     * @param {*} [options] Override http request options.
     */
    postLettersSendPost(postLetter: PostLetter, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum PostPostcardApiApiKeys {
}
export declare class PostPostcardApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PostPostcardApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Export postcard history to a CSV file
     * @summary Export postcard history to a CSV file
     * @param filename Filename to export to
     * @param {*} [options] Override http request options.
     */
    postPostcardsHistoryExportGet(filename: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Retrieve the history of postcards sent or scheduled
     * @summary Retrieve the history of postcards sent or scheduled
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    postPostcardsHistoryGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Calculate price for sending one or more postcards
     * @summary Calculate price for sending one or more postcards
     * @param postPostcards PostPostcard model
     * @param {*} [options] Override http request options.
     */
    postPostcardsPricePost(postPostcards: PostPostcard, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send one or more postcards
     * @summary Send one or more postcards
     * @param postPostcards PostPostcard model
     * @param {*} [options] Override http request options.
     */
    postPostcardsSendPost(postPostcards: PostPostcard, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum PostReturnAddressApiApiKeys {
}
export declare class PostReturnAddressApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PostReturnAddressApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete specific post return address
     * @summary Delete specific post return address
     * @param returnAddressId Return address ID
     * @param {*} [options] Override http request options.
     */
    postReturnAddressesByReturnAddressIdDelete(returnAddressId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific post return address
     * @summary Get specific post return address
     * @param returnAddressId Return address ID
     * @param {*} [options] Override http request options.
     */
    postReturnAddressesByReturnAddressIdGet(returnAddressId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update post return address
     * @summary Update post return address
     * @param returnAddressId Return address ID
     * @param returnAddress Address model
     * @param {*} [options] Override http request options.
     */
    postReturnAddressesByReturnAddressIdPut(returnAddressId: number, returnAddress: Address, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get list of post return addresses
     * @summary Get list of post return addresses
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    postReturnAddressesGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create post return address
     * @summary Create post return address
     * @param returnAddress Address model
     * @param {*} [options] Override http request options.
     */
    postReturnAddressesPost(returnAddress: Address, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum ReferralAccountApiApiKeys {
}
export declare class ReferralAccountApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ReferralAccountApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get all referral accounts
     * @summary Get all referral accounts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    referralAccountsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum ResellerAccountApiApiKeys {
}
export declare class ResellerAccountApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ResellerAccountApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get Reseller clients Account
     * @summary Get Reseller clients Account
     * @param clientUserId User ID of client
     * @param {*} [options] Override http request options.
     */
    resellerAccountsByClientUserIdGet(clientUserId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update Reseller clients Account
     * @summary Update Reseller clients Account
     * @param clientUserId User ID of client
     * @param resellerAccount ResellerAccount model
     * @param {*} [options] Override http request options.
     */
    resellerAccountsByClientUserIdPut(clientUserId: number, resellerAccount: ResellerAccount, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get list of reseller accounts
     * @summary Get list of reseller accounts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    resellerAccountsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create reseller account
     * @summary Create reseller account
     * @param resellerAccount ResellerAccount model
     * @param {*} [options] Override http request options.
     */
    resellerAccountsPost(resellerAccount: ResellerAccount, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum SMSApiApiKeys {
}
export declare class SMSApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SMSApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Update all scheduled message as cancelled
     * @summary Update all scheduled message as cancelled
     * @param {*} [options] Override http request options.
     */
    smsCancelAllPut(options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update scheduled message as cancelled
     * @summary Update scheduled message as cancelled
     * @param messageId The message ID you want to cancel
     * @param {*} [options] Override http request options.
     */
    smsCancelByMessageIdPut(messageId: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Export all sms history
     * @summary Export all sms history
     * @param filename Filename to download history as
     * @param {*} [options] Override http request options.
     */
    smsHistoryExportGet(filename: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all sms history
     * @summary Get all sms history
     * @param q Custom query Example: from:{number},status_code:201.
     * @param dateFrom Start date
     * @param dateTo End date
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsHistoryGet(q?: string, dateFrom?: number, dateTo?: number, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all inbound sms
     * @summary Get all inbound sms
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsInboundGet(q?: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create inbound sms
     * @summary Create inbound sms
     * @param url Url model
     * @param {*} [options] Override http request options.
     */
    smsInboundPost(url: Url, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Mark specific inbound SMS as read
     * @summary Mark inbound SMS as read
     * @param messageId Message ID
     * @param {*} [options] Override http request options.
     */
    smsInboundReadByMessageIdPut(messageId: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Mark all inbound SMS as read optionally before a certain date
     * @summary Mark inbound SMS as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    smsInboundReadPut(dateBefore?: DateBefore, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Calculate sms price
     * @summary Calculate sms price
     * @param smsMessages SmsMessageCollection model
     * @param {*} [options] Override http request options.
     */
    smsPricePost(smsMessages: SmsMessageCollection, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get a Specific Delivery Receipt
     * @summary Get a Specific Delivery Receipt
     * @param messageId Message ID
     * @param {*} [options] Override http request options.
     */
    smsReceiptsByMessageIdGet(messageId: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all delivery receipts
     * @summary Get all delivery receipts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsReceiptsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Add a delivery receipt
     * @summary Add a delivery receipt
     * @param url Url model
     * @param {*} [options] Override http request options.
     */
    smsReceiptsPost(url: Url, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Mark delivery receipts as read
     * @summary Mark delivery receipts as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    smsReceiptsReadPut(dateBefore?: DateBefore, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     *  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.*
     * @summary Send sms message(s)
     * @param smsMessages SmsMessageCollection model
     * @param {*} [options] Override http request options.
     */
    smsSendPost(smsMessages: SmsMessageCollection, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Delete sms template
     * @summary Delete sms template
     * @param templateId Template id
     * @param {*} [options] Override http request options.
     */
    smsTemplatesByTemplateIdDelete(templateId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update sms template
     * @summary Update sms template
     * @param templateId Template id
     * @param smsTemplate Template item
     * @param {*} [options] Override http request options.
     */
    smsTemplatesByTemplateIdPut(templateId: number, smsTemplate: SmsTemplate, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get lists of all sms templates
     * @summary Get lists of all sms templates
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsTemplatesGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create sms template
     * @summary Create sms template
     * @param smsTemplate SmsTemplate model
     * @param {*} [options] Override http request options.
     */
    smsTemplatesPost(smsTemplate: SmsTemplate, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum SMSDeliveryReceiptRulesApiApiKeys {
}
export declare class SMSDeliveryReceiptRulesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SMSDeliveryReceiptRulesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete sms delivery receipt automation
     * @summary Delete sms delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    smsDeliveryReceiptAutomationDelete(receiptRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific sms delivery receipt automation
     * @summary Get specific sms delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    smsDeliveryReceiptAutomationGet(receiptRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create sms delivery receipt automations
     * @summary Create sms delivery receipt automations
     * @param deliveryReceiptRule sms delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    smsDeliveryReceiptAutomationPost(deliveryReceiptRule: DeliveryReceiptRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update sms delivery receipt automation
     * @summary Update sms delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param deliveryReceiptRule Delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    smsDeliveryReceiptAutomationPut(receiptRuleId: number, deliveryReceiptRule: DeliveryReceiptRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all sms delivery receipt automations
     * @summary Get all sms delivery receipt automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsDeliveryReceiptAutomationsGet(q?: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum SearchApiApiKeys {
}
export declare class SearchApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SearchApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get list of searched contact list
     * @summary Get list of searched contact list
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    searchContactsListsGet(q: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum SmsCampaignApiApiKeys {
}
export declare class SmsCampaignApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SmsCampaignApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get specific sms campaign
     * @summary Get specific sms campaign
     * @param smsCampaignId ID of SMS campaign to retrieve
     * @param {*} [options] Override http request options.
     */
    smsCampaignBySmsCampaignIdGet(smsCampaignId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update sms campaign
     * @summary Update sms campaign
     * @param smsCampaignId ID of SMS campaign to update
     * @param campaign SmsCampaign model
     * @param {*} [options] Override http request options.
     */
    smsCampaignsBySmsCampaignIdPut(smsCampaignId: number, campaign: SmsCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Cancel sms campaign
     * @summary Cancel sms campaign
     * @param smsCampaignId ID of SMS Campaign to cancel
     * @param {*} [options] Override http request options.
     */
    smsCampaignsCancelBySmsCampaignIdPut(smsCampaignId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get list of sms campaigns
     * @summary Get list of sms campaigns
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    smsCampaignsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Calculate price for sms campaign
     * @summary Calculate price for sms campaign
     * @param campaign SmsCampaign model
     * @param {*} [options] Override http request options.
     */
    smsCampaignsPricePost(campaign: SmsCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create sms campaign
     * @summary Create sms campaign
     * @param campaign SmsCampaign model
     * @param {*} [options] Override http request options.
     */
    smsCampaignsSendPost(campaign: SmsCampaign, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum StatisticsApiApiKeys {
}
export declare class StatisticsApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: StatisticsApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get sms statistics
     * @summary Get sms statistics
     * @param {*} [options] Override http request options.
     */
    statisticsSmsGet(options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get voice statistics
     * @summary Get voice statistics
     * @param {*} [options] Override http request options.
     */
    statisticsVoiceGet(options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum SubaccountApiApiKeys {
}
export declare class SubaccountApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SubaccountApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete a subaccount
     * @summary Delete a subaccount
     * @param subaccountId ID of subaccount to delete
     * @param {*} [options] Override http request options.
     */
    subaccountsBySubaccountIdDelete(subaccountId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific subaccount
     * @summary Get specific subaccount
     * @param subaccountId ID of subaccount to get
     * @param {*} [options] Override http request options.
     */
    subaccountsBySubaccountIdGet(subaccountId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update subaccount
     * @summary Update subaccount
     * @param subaccountId ID of subaccount to update
     * @param subaccount Subaccount model
     * @param {*} [options] Override http request options.
     */
    subaccountsBySubaccountIdPut(subaccountId: number, subaccount: Subaccount, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all subaccounts
     * @summary Get all subaccounts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    subaccountsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create new subaccount
     * @summary Create new subaccount
     * @param subaccount Subaccount model
     * @param {*} [options] Override http request options.
     */
    subaccountsPost(subaccount: Subaccount, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Regenerate an API Key
     * @summary Regenerate an API Key
     * @param subaccountId ID of subaccount to regenerate API key for
     * @param {*} [options] Override http request options.
     */
    subaccountsRegenApiKeyBySubaccountIdPut(subaccountId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum TimezonesApiApiKeys {
}
export declare class TimezonesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TimezonesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Get supported list of timezones.
     * @summary Get supported list of timezones.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    timezonesGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum TransactionalEmailApiApiKeys {
}
export declare class TransactionalEmailApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TransactionalEmailApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Export all Transactional Email history
     * @summary Export all Transactional Email history
     * @param filename Filename to download history as
     * @param dateFrom Start date
     * @param dateTo End date
     * @param {*} [options] Override http request options.
     */
    emailHistoryExportGet(filename: string, dateFrom?: number, dateTo?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all transactional email history
     * @summary Get all transactional email history
     * @param dateFrom Start date
     * @param dateTo End date
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    emailHistoryGet(dateFrom?: number, dateTo?: number, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get transactional email price
     * @summary Get transactional email price
     * @param email Email model
     * @param {*} [options] Override http request options.
     */
    emailPricePost(email: Email, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send transactional email
     * @summary Send transactional email
     * @param email Email model
     * @param {*} [options] Override http request options.
     */
    emailSendPost(email: Email, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum TransferCreditApiApiKeys {
}
export declare class TransferCreditApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TransferCreditApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Transfer Credit
     * @summary Transfer Credit
     * @param resellerAccountTransferCredit ResellerAccountTransferCredit model
     * @param {*} [options] Override http request options.
     */
    resellerTransferCreditPut(resellerAccountTransferCredit: ResellerAccountTransferCredit, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum UploadApiApiKeys {
}
export declare class UploadApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: UploadApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Upload File
     * @summary Upload File
     * @param uploadFile Your file to be uploaded
     * @param convert
     * @param {*} [options] Override http request options.
     */
    uploadsPost(uploadFile: UploadFile, convert: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum UserEmailTemplatesApiApiKeys {
}
export declare class UserEmailTemplatesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: UserEmailTemplatesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete user email template
     * @summary Delete user email template
     * @param templateId Email template id
     * @param {*} [options] Override http request options.
     */
    emailTemplateDelete(templateId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific user email templates
     * @summary Get specific user email template
     * @param templateId Email template id
     * @param {*} [options] Override http request options.
     */
    emailTemplateGet(templateId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create email template
     * @summary Create email template
     * @param emailTemplate Email template model
     * @param {*} [options] Override http request options.
     */
    emailTemplatePost(emailTemplate: EmailTemplateNew, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update email template
     * @summary Update email template
     * @param templateId Email template id
     * @param emailTemplate Email template model
     * @param {*} [options] Override http request options.
     */
    emailTemplatePut(templateId: number, emailTemplate: EmailTemplateUpdate, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all user email templates
     * @summary Get all user email templates
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    emailTemplatesGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum VoiceApiApiKeys {
}
export declare class VoiceApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: VoiceApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Update all voice messages as cancelled
     * @summary Update all voice messages as cancelled
     * @param {*} [options] Override http request options.
     */
    voiceCancelAllPut(options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update voice message status as cancelled
     * @summary Update voice message status as cancelled
     * @param messageId Your voice message id
     * @param {*} [options] Override http request options.
     */
    voiceCancelByMessageIdPut(messageId: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Export voice history
     * @summary Export voice history
     * @param filename Filename to export to
     * @param {*} [options] Override http request options.
     */
    voiceHistoryExportGet(filename: string, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all voice history
     * @summary Get all voice history
     * @param dateFrom Timestamp (from) used to show records by date.
     * @param dateTo Timestamp (to) used to show records by date
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    voiceHistoryGet(dateFrom?: number, dateTo?: number, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all voice languages
     * @summary Get all voice languages
     * @param {*} [options] Override http request options.
     */
    voiceLangGet(options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Calculate voice price
     * @summary Calculate voice price
     * @param voiceMessages VoiceMessageCollection model
     * @param {*} [options] Override http request options.
     */
    voicePricePost(voiceMessages: VoiceMessageCollection, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all delivery receipts
     * @summary Get all delivery receipts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    voiceReceiptsGet(page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Add a delivery receipt
     * @summary Add a delivery receipt
     * @param url Url model
     * @param {*} [options] Override http request options.
     */
    voiceReceiptsPost(url: Url, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Mark delivery receipts as read
     * @summary Mark delivery receipts as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    voiceReceiptsReadPut(dateBefore?: DateBefore, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Send a voice call
     * @summary Send voice message(s)
     * @param voiceMessages VoiceMessageCollection model
     * @param {*} [options] Override http request options.
     */
    voiceSendPost(voiceMessages: VoiceMessageCollection, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
export declare enum VoiceDeliveryReceiptRulesApiApiKeys {
}
export declare class VoiceDeliveryReceiptRulesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BasicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: VoiceDeliveryReceiptRulesApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * Delete voice delivery receipt automation
     * @summary Delete voice delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    voiceDeliveryReceiptAutomationDelete(receiptRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get specific voice delivery receipt automation
     * @summary Get specific voice delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    voiceDeliveryReceiptAutomationGet(receiptRuleId: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Create voice delivery receipt automations
     * @summary Create voice delivery receipt automations
     * @param deliveryReceiptRule voice delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    voiceDeliveryReceiptAutomationPost(deliveryReceiptRule: DeliveryReceiptRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Update voice delivery receipt automation
     * @summary Update voice delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param deliveryReceiptRule Delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    voiceDeliveryReceiptAutomationPut(receiptRuleId: number, deliveryReceiptRule: DeliveryReceiptRule, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     * Get all voice delivery receipt automations
     * @summary Get all voice delivery receipt automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    voiceDeliveryReceiptAutomationsGet(q?: string, page?: number, limit?: number, options?: any): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
